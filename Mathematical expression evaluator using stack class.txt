import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
/*SAMA ZAYED*/
 interface IExpressionEvaluator {
  
/**
* Takes a symbolic/numeric infix expression as input and converts it to
* postfix notation. There is no assumption on spaces between terms or the
* length of the term (e.g., two digits symbolic or numeric term)
*
* @param expression infix expression
* @return postfix expression
*/
  
public String infixToPostfix(String expression);
  
  
/**
* Evaluate a postfix numeric expression, with a single space separator
* @param expression postfix expression
* @return the expression evaluated value
*/
  
public int evaluate(String expression);

}
/*public boolean checkvalidexpression(String EXP) {
        Evaluator  stack = new Evaluator();
        int cont=0;
         if(EXP.charAt(0)=='*'||EXP.charAt(0)=='/'||EXP.charAt(0)=='^') {
                    return false;
                }
         if(EXP.length()==2 && !Character.isLetter(EXP.charAt(0)) && EXP.charAt(0)!='-') {
                return false;
            }
      if(EXP.charAt(EXP.length()-1)=='+'||EXP.charAt(EXP.length()-1)=='-'||EXP.charAt(EXP.length()-1)=='*'||EXP.charAt(EXP.length()-1)=='/'||EXP.charAt(EXP.length()-1)=='^') {
                    return false;
                }
        for (int i=0 ; i<EXP.length(); i++) {
            char X = EXP.charAt(i);
            if(X=='+' || X=='-' || X=='*' || X=='/'|| X=='^') {
                if (!Character.isLetter(EXP.charAt(i+1)) && EXP.charAt(i+1)!='(' && EXP.charAt(i+1)!=')') {
                        if(! (X=='-' && EXP.charAt(i+1)=='-' || (i+2< EXP.length() && X!='-' && EXP.charAt(i+1)=='-' && EXP.charAt(i+2)=='-')) ){
                                return false;
                        }
                    }
                if(i>0 && i<EXP.length()-2 && EXP.charAt(i-1)=='-' && X=='-' && EXP.charAt(i+1)=='-' ){
                    return false;
                }
                cont++;
            }
            if(X== '('){
                if(cont==0|| EXP.length()<3) {
                    return false;
                }
                stack.push('(');
                cont++;
        }
            if (X == ')') {
                if(stack.size==0 || EXP.charAt(i-1)=='(') {
                    return false;
                }
                else{
                    stack.pop();
                    cont=0;
                }
            }        
        }
        if(stack.size==0 ) {
            return true;
        }else {
            return false;
        }}*/
public class Evaluator implements IExpressionEvaluator {
    public static int a=0;
    
    public static int b=0;
    
    public static int c=0;
    
    public class MyStack  {
        
    public class DoubleLinkedList  {
        
    Node tail;
        
    Node head;
        
    public class Node {
        Object val;
        Node next;
        Node prev;
        
        public Node (Object val) {
            this.val=val;
        }
        
        
        public Node (Object val ,Node next, Node prev) 
        {
            this.val=val;
            this.next=next;
            this.prev=prev;
        }
        
    }
        
        
        public void add(Object element) {
        Node node =new Node(element);
        node.prev=tail;
        node.next=null;
        if(tail!=null)
            tail.next=node;
        if(tail==null)
            head=node;
        tail=node; 
    }
        public void add(int index, Object element) {
        Node node =new Node(element);
        int siz= size();
        if(index<0|| index>siz){
            System.out.println("Error");
            System.exit(0);
        }
        if(index==0) {
            node.prev=null;
            node.next=head;
            if(head!=null) {
                head.prev=node;
            }
            head=node;
            if(tail==null)
            tail=node;
            return;
        }
        
        Node oooo = head;
        
        for(int i=0 ;i<index; i++) {
            if(oooo==null) {
                System.out.println("Error");
                System.exit(0);
            }
            oooo=oooo.next;
        }
        
        if(oooo==null) {
            add(node.val);
            return;
        }
        
        node.prev=oooo.prev;
        node.next=oooo;
        oooo.prev.next=node;
        oooo.prev=node;
        
    }
    
  

    public Object get(int index) {
        int s= size();
        if(index<0|| index>s){
            System.out.println("Error");
            System.exit(0);
        }
        Node it = head;
        for(int i=0 ;i<index; i++) {
            if(it.next==null) {
                System.out.print("Error");
                System.exit(0);
            }
            it=it.next;
        }
        return it.val;
    }

    public boolean isEmpty() {
        if(head==null)
            return true;
        else
            return false;
    }

    public void delete(int index) {
        int s= size();
        if(index<0|| index>=s){
            System.out.println("Error");
            System.exit(0);
        }
         if (index==0) {
            if(s==1){
                head=null;
                tail=null;
            }
            else{
            head.next.prev=null;
            head=head.next;
            }
        }
        else if(index==s-1) {
            tail.prev.next=null;
            tail=tail.prev;
        }
        else {
        Node it = head;
        for(int i=0 ;i<index; i++) {
            if(it==null) {
                System.out.println("Error");
                System.exit(0);
                }
            it=it.next;
            }
        it.next.prev=it.prev;
        it.prev.next=it.next;
        }
       }

    public int size() {
        int s=0;
        Node it=head;
        while(it!=null) {
            s++;
            it=it.next;
        }
        return s;
    }
    }
    
    DoubleLinkedList stk =new DoubleLinkedList();
////////////////////////////////////////////////////
        public void push(Object element)
         {
          stk.add(0, element);
         }
///////////////////////////////////////////////////
        public Object pop()
        {
         if(stk.size()==0)
          {
            System.out.println("Error");
            System.exit(0);
          }
          Object x=stk.get(0);
          stk.delete(0);
          return x;
        }
////////////////////////////////////////////////////
    public Object peek()
      {
        if(stk.size()==0){
            System.out.println("Error");
            System.exit(0);
        }
        return stk.get(0);
      }
/////////////////////////////////////////////////////
    public boolean isEmpty()
    {
        return stk.isEmpty();
    }
////////////////////////////////////////////////////
    public int size()
    {
        return stk.size();
    }
///////////////////////////////////////////////////////
    public int precedence(char x){
        if(x=='-' || x=='+') 
            return 1;
        else if (x=='*' || x=='/') 
            return 2;
        else if (x=='^')
            return 3;
        else 
            return 0;
    }
    }
   
    public String infixToPostfix(String expression){
        
        MyStack operator = new MyStack();
        
        MyStack sama= new MyStack();
        
        String Postfix= new String();
        
        char w;
        
        char z;
        
        char x=expression.charAt(expression.length()-1);
        
        if(x=='*' || x=='/' || x=='^' || x=='-' || x=='+')
        {
            System.out.println("Error");
            System.exit(0);
        }
        x=expression.charAt(0);
        if(x=='*'||x=='/'||x=='^')
        {
            System.out.println("Error");
            System.exit(0);
        }
        for(int i=0; i<expression.length();i++)
        {
            x= expression.charAt(i);
            if(x=='a'|| x=='b'|| x=='c')
             {
                Postfix+=x;
             }
            else if(x=='(')
            {
                operator.push((Character)x);
                sama.push((Character)x);
            }
            else if(x==')')
            {
                w=(char)(Character)sama.pop();
                x=(char)(Character)operator.pop();
                while(x!='(')
                {
                    Postfix+=x;
                    x=(char)(Character)operator.pop();
                }
            }
            else
            {
             if(x=='*' || x=='/'||  x=='^' || x=='+')
             {
                 while (!operator.isEmpty() && operator.precedence(x)<= operator.precedence((char)(Character)operator.peek()))
                 {
                    Postfix +=(char)(Character) operator.pop();
                 }
                 if(expression.charAt(i+1)=='+') i++;
                operator.push(x);
             }
            else if(x=='-'&& expression.charAt(i+1)=='-'&& (i==0 || expression.charAt(i-1)=='(' ||expression.charAt(i-1)=='*'
            ||expression.charAt(i-1)=='/'|| expression.charAt(i-1)=='+'||expression.charAt(i-1)=='^'||expression.charAt(i-1)=='-'))

            {
                i++;
            }
            else if(x=='-'&& expression.charAt(i+1)=='-'&& i!=0 && expression.charAt(i-1)!='(')
            {
                x='+';
                i++;
                while (!operator.isEmpty() && operator.precedence(x)<= operator.precedence((char)(Character)operator.peek()))
                {
                    Postfix +=(char)(Character) operator.pop();
                 }
                operator.push(x);
            }
            else if(x=='-'&& expression.charAt(i+1)!='-'&& (i==0||expression.charAt(i-1)=='*' 
            ||expression.charAt(i-1)=='/'|| expression.charAt(i-1)=='+'||
            expression.charAt(i-1)=='^'||expression.charAt(i-1)=='-'))
            {
                x='-';
                operator.push((Character)x);
            }
            
            else if(x=='-'&& expression.charAt(i+1)!='-'&& i!=0 && expression.charAt(i-1)!='(')
            {
                x='-';
                while (!operator.isEmpty() && operator.precedence(x)<= operator.precedence((char)(Character)operator.peek()))
                {
                    Postfix += (char)(Character)operator.pop();
                 }
                operator.push((Character)x);
            }
            
            }
        }
        while (!operator.isEmpty())
        {
            if((char)(Character)operator.peek() == '(')
            {
                System.out.println("Error");
                System.exit(0);
            }
            Postfix+= (char)(Character) operator.pop();
         }
        if(!sama.isEmpty())
        {
            System.out.println("Error");
            System.exit(0);
        }
        return Postfix;
    }
      public int evaluate(String expression)
      { 
        MyStack cal= new MyStack();
        int num1;
        int num2;
        char x;
        for(int i=0 ; i< expression.length();i++){
            x=expression.charAt(i);
            if(Character.isLetter(x)){
                switch (x) {
                    case 'a':{
                        cal.push((Integer)a);
                        break;
                    }
                    case 'b':{
                        cal.push((Integer)b);
                        break;
                    }
                    case 'c':{
                        cal.push((Integer)c);
                        break;
                    }      
                }
            }
            else
            {
                num1 = (int)cal.pop();
                if(cal.isEmpty() && x=='-'){
                    cal.push((-1)*num1);
                }
                else{
                num2 = (int)cal.pop();
                switch(x)
                {
                    case '+':
                    cal.push((Integer)(num2+num1));
                    break;
                     
                    case '-':
                    cal.push((Integer)(num2- num1));
                    break;
                     
                    case '/':
                    cal.push((Integer)(num2/num1));
                    break;
                     
                    case '*':
                    cal.push((Integer)(num2*num1));
                    break;
                    case '^':
                    cal.push((Integer)((int)Math.pow(num2,num1)));
                    break;    
              }
                }
            }
        }
        return (int)cal.pop();
    }
  
     public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. */
        Scanner sc = new Scanner(System.in);
        
        String expression = sc.nextLine();
        
        String temp = sc.nextLine();
        
        a=Integer.valueOf(temp.substring(2)).intValue();
        
        temp = sc.nextLine();
        
        b=Integer.valueOf(temp.substring(2)).intValue();
        
        temp = sc.nextLine();
        
        c=Integer.valueOf(temp.substring(2)).intValue();
        
        Evaluator result = new Evaluator();
        
        String solution=result.infixToPostfix(expression);
        
        System.out.println(solution);
        
        System.out.println(result.evaluate(solution));
        
    }
}