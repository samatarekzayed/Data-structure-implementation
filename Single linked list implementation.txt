import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

interface ILinkedList {
/**
* Inserts a specified element at the specified position in the list.
* @param index
* @param element
*/
public void add(int index, Object element);
/**
* Inserts the specified element at the end of the list.
* @param element
*/
public void add(Object element);
/**
* @param index
* @return the element at the specified position in this list.
*/
public Object get(int index);

/**
* Replaces the element at the specified position in this list with the
* specified element.
* @param index
* @param element
*/
public void set(int index, Object element);
/**
* Removes all of the elements from this list.
*/
public void clear();
/**
* @return true if this list contains no elements.
*/
public boolean isEmpty();
/**
* Removes the element at the specified position in this list.
* @param index
*/
public void remove(int index);
/**
* @return the number of elements in this list.
*/
public int size();
/**
* @param fromIndex
* @param toIndex
* @return a view of the portion of this list between the specified fromIndex and toIndex, inclusively.
*/
public ILinkedList sublist(int fromIndex, int toIndex);
/**
* @param o
* @return true if this list contains an element with the same value as the specified element.
*/
public boolean contains(Object o);

}
class Object { //without name 3lshan law b name kont hdtr a3ml destructor enma kda ay object f el hiah
     int val;            // lih val w next
     Object next;
}
    
/////////////////////////////////////////////////////////////////////////
   
  public class SingleLinkedList implements ILinkedList {
    
   
    int size=0;
     Object head=null;
    Object tail=null;
    ///////////////////////////////////////////////////////////
    public void add(int index, Object element)
    {
        if(size==0)
        {
          head=element;
        tail=element;
           size++; 
        }
        else if(index==0)
        {
           element.next=head;
            head=element;
            size++;
        }
       else
       {
       Object h=head;  //leh hena m3mlnash new Object() m3 enha msh mn nfs el class
       Object hh=new Object();
       for(int i=0;i<index-1;i++)
       {
           h=h.next;
       }
       hh=h.next;
       h.next=element;
       element.next=hh;
        size++;
       }
    }
    ////////////////////////////////////////////////////////////
    public void add(Object element)
    {
        if(size==0)
        {
           head=element;
            tail=element;
           size++;
        }
        else
        {
           tail.next=element;
           tail=element;
            size++;
        }
    }
    //////////////////////////////////////////////////////////
    public Object get(int index)
    {
        Object h=head;
        for(int i=0;i<index;i++)
        {
           h=h.next;
        }
        return h;
          
    }
    /////////////////////////////////////////////////////////
    public void set(int index, Object element)
    {
        if (index==0)
        {
            element.next=head.next;
            head=element;
        }
        else{
        Object h=head;
        for(int i=0;i<index-1;i++)
             h=h.next;
        element.next=h.next.next;
        h.next=element;
        }
    }
    //////////////////////////////////////////////////////////
    public void clear()
    {
      head=null;
      tail=null;
      size=0;
    }
    ///////////////////////////////////////////////////////////
    public boolean isEmpty()
    {
       if(size == 0) {
            return true;
        }
        return false;
    }
    ///////////////////////////////////////////////////////////
    public void remove(int index)
    {
        if(index==0)
        {
            head=head.next;
        }
        else
        {
        Object h=head;
        for(int i=0;i<index-1;i++)
            h=h.next;
        h.next=h.next.next;
        }
        size--;
        
    }
    ///////////////////////////////////////////////////////////
    public int size()
    {
        return size;
    }
    /////////////////////////////////////////////////////////////
    @Override
    public ILinkedList sublist(int fromIndex, int toIndex)  //3amlha b esm el interface m3rfsh leh
     {
        ILinkedList s = new SingleLinkedList ();  ////3amlha b esm el interface m3rfsh leh 
        Object h=head;
        for(int i=0;i<fromIndex;i++)
        {
           h=h.next; 
        }
        for(int i = 0;i<(toIndex- fromIndex + 1);i++) {
            s.add(h);
            h = h.next;
        }
        return s; 
     }   
    /////////////////////////////////////////////////////////////
    public boolean contains(Object o)
     {
       Object h=head;
       for(int i= 0;i<size;i++)
       {
           if(h.val==o.val)
               return true;
           h=h.next;
       }
       return false; 
     }
    ///////////////////////////////////////////////////////////////
    public void print()
     {
       if(size == 0){
            System.out.print("[]");
            return;
        }

      else
      {
        Object h = head;
        System.out.print("[");
        System.out.print(head.val); 
        for(int i=0;i<size-1;i++){
            h = h.next;
            System.out.print(", " + h.val);
        } 
          System.out.println("]");
      }
     }
    ///////////////////////////////////////////////////////////////
    /* Implement your linked list class here*/
  public static void main(String[] args) {
        
         Scanner sc=new Scanner(System.in);
         String sin= sc.nextLine().replaceAll("\\[|\\]", "");
         String[] s = sin.split(", ");;
         int[] arr= new int[s.length];
         if (s.length == 1 && s[0].isEmpty()) //length =1 la2n split trga3 el empty dah 3la asas eno awl element 
            arr = new int[]{};  // fadia y3ni
        else {
            for(int i = 0; i < s.length; ++i)
               arr[i] = Integer.parseInt(s[i]);
        }
        SingleLinkedList ls = new SingleLinkedList ();
        
        if(!s[0].isEmpty()){
            //System.out.println("Error");
          for(int i = 0; i < s.length; ++i){
                Object h= new Object();//ana msh 3arfa eshm3na 3amlna kda hena f el oop n3rf
                h.val = arr[i];
                ls.add(h);
          }
        }
    
        String op = sc.nextLine();
        int x;
        int index;
         Object sm=new Object();
        
         switch(op){
          case "add":
                x = sc.nextInt();
                sm.val = x;
                ls.add(sm);
                ls.print();
                break;
           case "addToIndex":
                index = sc.nextInt();
                x = sc.nextInt();
                sm.val = x;
                if(index < 0 || index > ls.size  )
                  System.out.println("Error");
               else{
                    ls.add(index,sm);
                    ls.print();
                }
                break;
                 
            case "isEmpty":
                if(ls.isEmpty()){
                    System.out.println("True");
                }else{
                    System.out.println("False");
                }
                break;
                 
            case "set":
                index = sc.nextInt();
                x = sc.nextInt();
                sm.val = x;
               if(index < 0 || index >= ls.size  )
                  System.out.println("Error");
               else{
                    ls.set(index, sm);
                    ls.print();
                  }
                break;
            case "get":
                index = sc.nextInt();
               if(index < 0 || index >= ls.size  )
                  System.out.println("Error");
               else{
                    sm = ls.get(index);
                    System.out.println(sm.val);
                }
                break;
            case "size":
                System.out.println(ls.size);
                break;
                 
           case "contains":
                x = sc.nextInt();
                sm.val = x;
                if(ls.contains(sm)){
                    System.out.println("True");
                }else{
                    System.out.println("False");
                }
                break;

                 
                 
            case "sublist":
                index = sc.nextInt();
                x = sc.nextInt();
                 if(index >= ls.size || x >= ls.size || index < 0 || x < 0 || x < index) 
                    System.out.println("Error");
               else{
                    SingleLinkedList ss =  (SingleLinkedList)ls.sublist(index,x);
                    ss.print();
                }
                break;
                 
                 
            case "clear":
                ls.clear();
                ls.print();
                break;
                 
                 
            case "remove":
                index = sc.nextInt();
                if(index < 0 || index >= ls.size)
                  System.out.println("Error");
                else
                {
                ls.remove(index);
                    ls.print();
                }
                break;
            default:
                System.out.println("Error");
        }
        
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. */
    }
      
}