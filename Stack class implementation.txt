import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
//stack using singlelinkedlist b el class bta3 el siglelinked el code el fat 3amlto 3la eno stack singlelinked zat nafso
interface IStack {
  
  /*** Removes the element at the top of stack and returnsthat element.
  * @return top of stack element, or through exception if empty
  */
  
  public Object pop();
  
  /*** Get the element at the top of stack without removing it from stack.
  * @return top of stack element, or through exception if empty
  */
  
  public Object peek();
  
  /*** Pushes an item onto the top of this stack.
  * @param object to insert*
  */
  
  public void push(Object element);
  
  /*** Tests if this stack is empty
  * @return true if stack empty
  */
  public boolean isEmpty();
  
  public int size();
}

class Object {
    
    int val;
    Object next;
}

public class MyStack implements IStack {
     public class SingleLinkedList {
    int size=0;
     Object head=null;
    Object tail=null;
    ///////////////////////////////////////////////////////////
    public void add(int index, Object element)
    {
        if(size==0)
        {
          head=element;
        tail=element;
           size++; 
        }
        else if(index==0)
        {
           element.next=head;
            head=element;
            size++;
        }
       else
       {
       Object h=head;  //leh hena m3mlnash new Object() m3 enha msh mn nfs el class
       Object hh=new Object();
       for(int i=0;i<index-1;i++)
       {
           h=h.next;
       }
       hh=h.next;
       h.next=element;
       element.next=hh;
        size++;
       }
    }
    ////////////////////////////////////////////////////////////
    public void add(Object element)
    {
        if(size==0)
        {
           head=element;
            tail=element;
           size++;
        }
        else
        {
           tail.next=element;
           tail=element;
            size++;
        }
    }
    //////////////////////////////////////////////////////////
    public Object get(int index)
    {
        Object h=head;
        for(int i=0;i<index;i++)
        {
           h=h.next;
        }
        return h;
          
    }
    /////////////////////////////////////////////////////////
    public void set(int index, Object element)
    {
        if (index==0)
        {
            element.next=head.next;
            head=element;
        }
        else{
        Object h=head;
        for(int i=0;i<index-1;i++)
             h=h.next;
        element.next=h.next.next;
        h.next=element;
        }
    }
    //////////////////////////////////////////////////////////
    public void clear()
    {
      head=null;
      tail=null;
      size=0;
    }
    ///////////////////////////////////////////////////////////
    public boolean isEmpty()
    {
       if(size == 0) {
            return true;
        }
        return false;
    }
    ///////////////////////////////////////////////////////////
    public void remove(int index)
    {
        if(index==0)
        {
            head=head.next;
        }
        else
        {
        Object h=head;
        for(int i=0;i<index-1;i++)
            h=h.next;
        h.next=h.next.next;
        }
        size--;
        
    }
    ///////////////////////////////////////////////////////////
    public int size()
    {
        return size;
    }
    ///////////////////////////////////////////////////////////////
        public void printing()
     {
       if(size == 0){
            System.out.print("[]");
            return;
        }

      else
      {
        Object h = head;
        System.out.print("[");
        System.out.print(head.val); 
        for(int i=0;i<size-1;i++){
            h = h.next;
            System.out.print(", " + h.val);
        } 
          System.out.println("]");
      }
     }   
         
         
   ////////////////////////////////////////////////////////////////
     }
    SingleLinkedList ll=new SingleLinkedList();
    public boolean isEmpty()
    {
        return ll.isEmpty();
    }
    
 ///////////////////////////////////////////////////////////
    public int size()
    {
        return ll.size();
    }
  
/////////////////////////////////////////////////////////////
    public void print()
     {
      ll.printing();
     }
    ///////////////////////////////////////////////////////////////
     public Object pop()
     { 
         if(ll.size()==0)
         {
            return null;
         }
         else
         {
          Object h=ll.get(0);
          ll.remove(0);
          return h;
         }
     }
   ///////////////////////////////////////////////////////////////
     public Object peek()
     {
        if(ll.size()==0)
         {
             return null;
         }
         else
         {
        return ll.get(0);
         }
     }
   //////////////////////////////////////////////////////////////////
     public void push(Object element)
     {
        ll.add(0,element);
     }
  /////////////////////////////////////////////////////////////////
         
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */       Scanner sc=new Scanner(System.in);
         String sin= sc.nextLine().replaceAll("\\[|\\]", "");
         String[] s = sin.split(", ");;
         int[] arr= new int[s.length];
         if (s.length == 1 && s[0].isEmpty()) //length =1 la2n split trga3 el empty dah 3la asas eno awl element 
            arr = new int[]{};  // fadia y3ni
        else {
            for(int i = 0; i < s.length; ++i)
               arr[i] = Integer.parseInt(s[i]);
        }
        MyStack stk = new MyStack ();
        
        int[] arr2= new int[arr.length];
        int j=0;
        for(int i=arr.length-1;i>-1;i--)
        {
           arr2[j++]=arr[i]; 
            
        }
        
        if(!s[0].isEmpty()){
            //System.out.println("Error");
          for(int i = 0; i < s.length; ++i){
                Object h= new Object();//ana msh 3arfa eshm3na 3amlna kda hena f el oop n3rf
                h.val = arr2[i];
                stk.push(h);
          }
        }
    
    
        String op = sc.nextLine();
        Object sm=new Object();
        int x;
         switch(op){
          case "push":
               x=sc.nextInt();
                 sm.val=x;
               stk.push(sm);
               stk.print();
                break;
           case "pop":
               if( stk.pop()==null)
                   System.out.print("Error");
               else 
               {
                stk.print();
               }
                break;
                 
            case "peek":
                if(stk.peek()==null)
                     System.out.print("Error");
                else
                {
                sm=stk.peek();
                System.out.print(sm.val);
                }
                break;
                 
            
            case "size":
                System.out.println(stk.size());
                break;
            
            case "isEmpty":
                if(stk.isEmpty()){
                    System.out.println("True");
                }else{
                    System.out.println("False");
                }
                break;
                 
                 
            default:
                System.out.println("Error");
        }
        
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. */
    }
    
}